타임리프 : 
서버사이드렌더링 하는거 (백엔드에서 html 동적으로 렌더링)
네츄럴 템플릿 : 순수HTML을 최대한 유지해서 웹에서 열어봐도 파일안깨짐
th:utext= unescape처리, 태그적용할때 등 "<"를 "<"그대로 읽음

th:inline="none" : 타임리프로 해석하지 말란뜻 

escape처리를 기본으로 하고, 특수상황에서만 unescape를 쓴다

변수선언 th:with="변수명=${데이터}"

컨텐츠 안에서 직접 출력하기 = [[${data}]]

타임리프가 제공한다 기본객체
${#locale}

편의 객체도 제공한다.
HTTP 요청 파라미터 접근: param
예) ${param.paramData}
HTTP 세션 접근: session
예) ${session.sessionData}
스프링 빈 접근: @
예) ${@helloBean.hello('Spring!')}


유틸리티 객체와 날짜
타임리프는 문자, 숫자, 날짜, URI등을 편리하게 다루는 다양한 유틸리티 객체들을 제공한다.
필요할떄 메뉴얼 보고 쓰면댐
타임리프 유틸리티 객체들
#message : 메시지, 국제화 처리
#uris : URI 이스케이프 지원
#dates : java.util.Date 서식 지원
#calendars : java.util.Calendar 서식 지원
#temporals : 자바8 날짜 서식 지원
#numbers : 숫자 서식 지원
#strings : 문자 관련 편의 기능
#objects : 객체 관련 기능 제공
#bools : boolean 관련 기능 제공
#arrays : 배열 관련 기능 제공
#lists , #sets , #maps : 컬렉션 관련 기능 제공
#ids : 아이디 처리 관련 기능 제공, 뒤에서 설명

URL링크
url표현 : th:href="@{/hello}"
url에 파라미터 넣는 법 : th:href="@{/hello(param1=${param1}, param2=${param2})}"
url에 경로 넣는 법 : th:href="@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}"
url에 경로와 파람 넣는 법 : th:href="@{/hello/{param1}(param1=${param1}, param2=${param2})}"
(경로 매핑후 남는애들은 파라미터로 들어감)

리터럴
타임리프에서 문자리터럴은 항상 ' (작은따옴표)로 감싸야한다
공백없이 쭉이어진다면 생략해도된다
리터럴 대체문법 :  th:text="|hello ${data}|"
"'hello ' + ${data}" 대신 대체문법으로 편하게 쓸 수 있따

연산
비교연산: HTML 엔티티를 사용해야 하는 부분을 주의하자, 
> (&gt;) (gt), < (&lt;) (lt), >= (ge), <= (le), ! (not), == (eq), != (neq, ne)
조건식: 자바의 조건식과 유사하다.  th:text="(조건식)? 'true식':'false식'"
Elvis 연산자: 조건식의 편의 버전. true면 data출력.  th:text="${data}?: 'false식'"
No-Operation: _ 인 경우 마치 타임리프가 실행되지 않는 것 처럼 동작한다.   
<span th:text="${data}?: _">데이터가 없습니다.</span> : true면 data 출력, false면 span태그 내부 텍스트 실행됨.
이것을 잘 사용하면 HTML의 내용 그대로 활용할 수 있다. 마지막 예를 보면 데이터가 없습니다. 부분이 그대로 출력된다

속성값 설정
th:*로 HTML태그의 기존속성 대체하거나 없으면 새로만든다
기존 속성의 속상값 앞뒤에 속성값 추가/붙이기 가능 : th:attrappend="", th:attrprepend=""
예시) th:attrappend="class=' large'"
th:classappend : 클래스는 별도로 th:classappend="large" 와 같이 사용 가능
html은 checked속성 존재시 무조건 체크표시 되지만, 타임리프에선 th:checked="false"하면 체크해제됨

반복
th:each="변수 : ${리스트등등}" : for문과동일동작, 변수.값으로 값 꺼내 쓴다
예시)
<tr th:each="user : ${users}">
    <td th:text="${user.username}">username</td>
    <td th:text="${user.age}">0</td>
</tr>
반복 상태 유지
<tr th:each="user, userStat : ${users}"> 혹은 <tr th:each="user : ${users}">한담에 변수명Stat으로 호출해서 사용
반복의 두번째 파라미터를 설정해서 반복의 상태를 확인 할 수 있습니다.
두번째 파라미터는 생략 가능한데, 생략하면 지정한 변수명( user ) + Stat 가 됩니다.
여기서는 user + Stat = userStat 이므로 생략 가능합니다.
반복 상태 유지 기능
index : 0부터 시작하는 값
count : 1부터 시작하는 값
size : 전체 사이즈
even , odd : 홀수, 짝수 여부( boolean )
first , last :처음, 마지막 여부( boolean )
current : 현재 객체

조건식-if문
th:if나 unless값이 false면 해당 태그 아예 표시 안된다
if문 : th:if="${user.age lt 20}"
if문반대(조건불만족시트루) : th:unless="${user.age ge 20}"
조건식-switch문
th:switch="${조건식}"후 th:case="값", th:case="*"는 디폴트 실행
<td th:switch="${user.age}">
    <span th:case="10">10살</span>
    <span th:case="20">20살</span>
    <span th:case="*">기타</span>
</td>

주석
1. 표준 HTML 주석  <!--구문 -->
자바스크립트의 표준 HTML 주석은 타임리프가 렌더링 하지 않고, 그대로 남겨둔다.
2. 타임리프 파서 주석  <!--/*-->여러줄<!--*/-->
타임리프 파서 주석은 타임리프의 진짜 주석이다. 렌더링에서 주석 부분을 제거한다.
3. 타임리프 프로토타입 주석	<!--/*/ 구문 /*/-->
HTML 파일을 그대로 열어보면 주석처리가 되지만, 타임리프를 렌더링 한 경우에만 보이는 기능이다.

블록 : th는 보통 속성으로 사용되지만, each만으로 안되는 경우 자체 태그 사용해서 해결
<th:block> 은 HTML 태그가 아닌 타임리프의 유일한 자체 태그다
예시) for문 돌리면서 두 영역을 나눠 표현하고싶을때

자바스크립트 인라인 : 자바스크립트에서 타임리프 편리하게 사용하게해줌
<script th:inline="javascript">
텍스트 렌더링 : 스트링타입에 " 하지않아도 변수에 알아서 스트링으로 삽입해줌
내추럴 템플릿 :  HTML 파일을 직접 열어도 동작하는 내추럴 템플릿 기능을 제공한다.
var username2 = /*[[${user.username}]]*/ "test username";
인라인 사용 전 var username2 = /*userA*/ "test username";
인라인 사용 후 var username2 = "userA";
객체 : 객체는 알아서 객체타입Json으로 넣어줌.

자바스크립트 인라인 each : each기능 js에서 지원됨
[# th:each="user, stat : ${users}"]
구문
[/]

템플릿조각
th:fragment="이름" <-- 메서드와 유사 , 다른데서 이 이름으로 이 태그전체 불러다 쓸수있음
(여기부턴 대충넘어갔음 나중에 정리)

----

메시지
다양한 메시지(화면상의 텍스트 등)를 한곳에서 관리하는 기능
-> 수정 한번에 수백개 노가다하지 않아도된다

국제화
메시지를 나라별 관리하는거

스프링부트사용시, 메시지기능 사용을위한 MessageSource를 빈에 자동등록해준다
->앱속성파일에 spring.messages.basename=messages,config.i18n.messages 입력하면되는듯

주의 : 인코딩에 utf-8설정은 반듣이 해야한다

메시지 프로퍼티 파일에서 다음 메시지의 {0} 부분은 매개변수를 전달해서 치환할 수 있다.
hello.name=안녕 {0} -> Spring 단어를 매개변수로 전달 -> 안녕 Spring

.getMessage("메시지코드",매개변수,로케일)
.getMessage("메시지코드",매개변수,디폴트메시지,로케일)
디폴트메시지 없이 메시지코드없는경우 NoSuchMessageException 발생
로케일: null은 디폴트, Locale.KOREA 이런식으로 사용

LocaleResolver
스프링은 Locale 선택 방식을 변경할 수 있도록 LocaleResolver 라는 인터페이스를 제공하는데
스프링 부트는 기본으로 Accept-Language 를 활용하는 AcceptHeaderLocaleResolver 를 사용한다
만약 Locale 선택 방식을 변경하려면 LocaleResolver 의 구현체를 변경해서 쿠키나 세션 기반의 Locale 선택 기능을 사용할 수 있다. 
예를 들어서 고객이 직접 Locale 을 선택하도록 하는 것이다. (설정까지 안가고 유저가 바로 팝업에서 변경시 감지되도록)

검증
컨트롤러의 중요한 역할중 하나는 HTTP 요청이 정상인지 검증하는 것이다. 그리고 정상 로직보다 이런 검증 로직을 잘
개발하는 것이 어쩌면 더 어려울 수 있다.

참고: 클라이언트 검증, 서버 검증
클라이언트 검증은 조작할 수 있으므로 보안에 취약하다.
서버만으로 검증하면, 즉각적인 고객 사용성이 부족해진다.
둘을 적절히 섞어서 사용하되, 최종적으로 서버 검증은 필수
API 방식을 사용하면 API 스펙을 잘 정의해서 검증 오류를 API 응답 결과에 잘 남겨주어야 함

검증방식
if(!StringUtils.hasText(item.getItemName())) 통해 컨트롤러에서 값 여부확인 혹은 기타 조건식 (item.getValue함수들)으로 검증
변수(errors)에 에러키와 에러메시지 매핑하여 넣어줌 (해시맵)
검증실패로직과 성공로직 병렬로 해서 해당하는 뷰 리턴
if(!errors.isEmpty())통해 변수(errors)값 존재시, errors를 모델매핑하여 등록뷰 리턴함->타임리프에서 th:if="${변수?.containsKey('에러키')}" 통해 렌더링

타임리프는 스프링의 BindingResult 를 활용해서 편리하게 검증 오류를 표현하는 기능을 제공한다.
컨트롤러에서 해당 모델 필드에 에러값 저장후 뷰에서 th:errors=*{필드}로 에러메시지 노출
용법은 강의문서 참고 th:field:로 에러 여부에따라 다르게 렌더링 가능 (스타일클래스,필드값 등)

BindingResult 파라미터 목록
objectName : 오류가 발생한 객체 이름
field : 오류 필드
rejectedValue : 사용자가 입력한 값(거절된 값)
bindingFailure : 타입 오류 같은 바인딩 실패인지, 검증 실패인지 구분 값
codes : 메시지 코드 -> 스트링 배열로 넣는다. 앞에꺼 없으면 다음꺼 표시 new String[]{"메시지코드"}
arguments : 메시지에서 사용하는 인자 new Object[]{10000, resultPrice} 이런식
defaultMessage : 기본 오류 메시지

rejectValue() , reject()
BindingResult 가 제공하는 rejectValue() , reject() 를 사용하면 FieldError , ObjectError 를 직
접 생성하지 않고, 깔끔하게 검증 오류를 다룰 수 있다

rejectValue(), reject()
field : 오류 필드명
errorCode : 오류 코드(이 오류 코드는 메시지에 등록된 코드가 아니다. 뒤에서 설명할 messageResolver를 위한 오류 코드이다.)
errorArgs : 오류 메시지에서 {0} 을 치환하기 위한 값
defaultMessage : 오류 메시지를 찾을 수 없을 때 사용하는 기본 메시지

메시지코드 범용성 : 객체명과 필드명을 조합한 메시지가 있는지 우선 확인하고, 없으면 좀 더 범용적인 메시지를 선택하도록 개발
스프링은 MessageCodesResolver 라는 것으로 이러한 기능을 지원한다
에러 프로퍼티 내용은 다음과같이 수정
#Level1
required.item.itemName: 상품 이름은 필수 입니다.
#Level2
required: 필수 값 입니다.

MessageCodesResolver
MessageCodesResolver codesResolver = new DefaultMessageCodesResolver();
String[] messageCodes = codesResolver.resolveMessageCodes("required","item");
String[] messageCodes = codesResolver.resolveMessageCodes("required","item", "itemName", String.class);
검증 오류 코드로 메시지 코드들을 생성한다.
MessageCodesResolver 인터페이스이고 DefaultMessageCodesResolver 는 기본 구현체이다.
주로 다음과 함께 사용 ObjectError , FieldError
rejectValue() , reject() 는 내부에서 MessageCodesResolver 를 사용한다. 여기에서 메시지 코드들을 생성한다.

DefaultMessageCodesResolver의 기본 메시지 생성 규칙
객체 오류
객체 오류의 경우 다음 순서로 2가지 생성
1.: code + "." + object name
2.: code

필드 오류 
필드 오류의 경우 다음 순서로 4가지 메시지 코드 생성
1.: code + "." + object name + "." + field
2.: code + "." + field
3.: code + "." + field type
4.: code

오류 메시지 관리 전략
1. 구체적인것에서 덜구체적인 것으로
2. 관리용이를 위해 범용메시지는 필요

ValidationUtils
Empty , 공백 같은 단순한 기능만 제공, 값 없으면 오류처리
ValidationUtils.rejectIfEmptyOrWhitespace(bindingResult, "itemName", "required");

검증 오류 코드는 다음과 같이 2가지로 나눌 수 있다.
1. 개발자가 직접 설정한 오류 코드 rejectValue() 를 직접 호출
2. 스프링이 직접 검증 오류에 추가한 경우(주로 타입 정보가 맞지 않음)

2번의 메시지코드도 개발자가 에러 프로퍼티에서 가공할수있따

errors의 자식이 bindingResult 다
errors엔 bindingResult담을수있따

@RequiredArgsConstructor : @Autowired를 사용하지 않고 의존성 주입 (생성자 하나면 @Autowired 생략가능)

Validator 분리 - 검증로직 비중이 크므로 컨트롤러에서 분리하여 별도 클래스로 생성
스프링은 Validator 인터페이스 지원함

WebDataBinder
WebDataBinder를 통해서 검증기 사용하기 - 컨트롤러에서는 검증기를 자동으로 적용할 수 있다
@InitBinder 해당 컨트롤러에만 영향을 준다. 글로벌 설정은 별도로 해야한다
@InitBinder
public void init(WebDataBinder dataBinder) {
 log.info("init binder {}", dataBinder);
 dataBinder.addValidators(itemValidator);
}
각 메서드 파라미터 영역 도메인 인자 앞에 @Validated 추가

Bean Validation
애노테이션 하나로 검증 로직을 매우 편리하게 적용할 수 있다.

@NotBlank : 빈값 + 공백만 있는 경우를 허용하지 않는다.
@NotNull : null 을 허용하지 않는다.
@Range(min = 1000, max = 1000000) : 범위 안의 값이어야 한다.
@Max(9999) : 최대 9999까지만 허용한다.

스프링은 개발자를 위해 빈 검증기를 스프링에 완전히 통합해두었다. -> 검증기 생성코드 구현 불필요
@Validated랑 BindingResult를 컨트롤러 메서드 파라미터에 넣어주고, 도메인데이터 클래스에 @검증 애노테이션으로 바로 쓰면된다
참고 : typeMismatch 뜨면 빈 밸리데이션은 작동 안한다

에러메시지 등록 : 아래처럼 검증 애노테이션마다 레벨 별 메시지코드로 에러메시지 수정가능하다
@NotBlank
NotBlank.item.itemName
NotBlank.itemName
NotBlank.java.lang.String
NotBlank

BeanValidation 메시지 찾는 순서
1. 생성된 메시지 코드 순서대로 messageSource 에서 메시지 찾기
2. 애노테이션의 message 속성 사용 @NotBlank(message = "공백! {0}")
3. 라이브러리가 제공하는 기본 값 사용 공백일 수 없습니다.

Bean Validation - 오브젝트 오류
Bean Validation에서 특정 필드( FieldError )가 아닌 해당 오브젝트 관련 오류( ObjectError ) 처리법
- 그냥 자바코드를 쓴다 (권장)
- @ScriptAssert() 쓴다 (제약많아 권장안함)
예시
@Data
@ScriptAssert(lang = "javascript", script = "_this.price * _this.quantity >= 10000")
public class Item {...}

Bean Validation - groups
검증 조건이 메서드마다 다른경우 사용가능
실무에선 잘안씀 (복잡하구 실무에선 등록용 폼 객체와 수정용 폼 객체를 분리해서 사용하기 때문)

사용예시
Item패키지에 인터페이스 생성 (SaveCheck, UpdateCheck)
- 도메인데이터 클래스 -
@NotBlank(groups = {SaveCheck.class, UpdateCheck.class})
private String itemName;
- 컨트롤러 메서드 -
public String addItemV2(@Validated(SaveCheck.class) @ModelAttribute Item item, 
BindingResult bindingResult, RedirectAttributes redirectAttributes) { //... }

검증조건 메서드마다 다른경우 : 객체 폼을 분리후 메서드 파라미터에 다음과같이 받는다
각 메서드(@Validated @ModelAttribute("item") ItemSaveForm form)

Bean Validation - HTTP 메시지 컨버터
@Valid , @Validated 는 HttpMessageConverter ( @RequestBody )에도 적용할 수 있다.
참고
@ModelAttribute 는 HTTP 요청 파라미터(URL 쿼리 스트링, POST Form)를 다룰 때 사용한다.
@RequestBody 는 HTTP Body의 데이터를 객체로 변환할 때 사용한다. 주로 API JSON 요청을 다룰 때 사용한다.

API의 경우 3가지 경우를 나누어 생각해야 한다.
성공 요청: 성공
실패 요청: JSON을 객체로 생성하는 것 자체가 실패함
검증 오류 요청: JSON을 객체로 생성하는 것은 성공했고, 검증에서 실패함

@ModelAttribute vs @RequestBody
@RequestBody는 객체가 생성되어야하므로 실패시 이후 단계 진행되지 않고 예외가 발생한다. 
컨트롤러도 호출되지 않고, Validator도 적용할 수 없다

------------로그인,세션

패키지구조 : 의존관계가 단방향으로 흘러야 나중에 코드 갈아엎어도 문제없다
웹/도메인 분리 : 웹은 도메인을 의존하지만 도메인은 웹을 의존하지 않아야 추후 웹을 다른 기술로 바꿔도 문제없다

특정 value로 검색 코드 : Optional(값이 없으면 Null 반환함), .stream() ~~ 사용
public Optional<Member> findByLoginId(String loginId) {
        return findAll().stream()
                .filter(m -> m.getLoginId().equals(loginId))
                .findFirst();
}

글로벌 오류는 코드로 별도 구현
-> 서비스 코드에서 @Valid-hasErrors() 코드, 값 받아오는 코드, 받아온 후 글로벌오류 검증 및 처리 코드, 이후 성공로직 리다이렉트로 리턴
글로벌 오류 : bindingResult.reject() 를 사용해서 글로벌 오류( ObjectError )를 생성한다

쿠키생성
모든 요청에 쿠키 정보 자동 포함
로그인 상태 유지를 위해 로그인에 성공하면 HTTP 응답에 쿠키를 담아서 브라우저에 전달

쿠키에는 영속 쿠키와 세션 쿠키가 있다.
영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지
세션 쿠키: 만료 날짜를 생략하면 브라우저 종료시 까지만 유지. 쿠키생성시 시간정보를 주지않으면 세션쿠키가 됨
브라우저 종료시 로그아웃이 되길 기대하므로, 우리에게 필요한 것은 세션 쿠키이다

쿠키생성시 컨트롤러 로직에서 HttpServletResponse response 파라미터 포함후 response로 전달함

로그아웃시 쿠키 삭제처리
Cookie cookie = new Cookie(cookieName, null);
cookie.setMaxAge(0);
response.addCookie(cookie);

쿠키 보안문제 : 쿠키는 변경 및 탈취가능
- 쿠키에 중요한 값을 노출하지 않고, 사용자 별로 예측 불가능한 임의의 토큰(랜덤 값)을 노출하고, 서버에서 토큰과 사용자 id를 매핑해서 인식한다. 그리고 서버에서 토큰을 관리한다.
- 토큰은 해커가 임의의 값을 넣어도 찾을 수 없도록 예상 불가능 해야 한다.
- 해커가 토큰을 털어가도 시간이 지나면 사용할 수 없도록 서버에서 해당 토큰의 만료시간을 짧게(예: 30분) 유지한다. 또는 해킹이 의심되는 경우 서버에서 해당 토큰을 강제로 제거하면 된다.

세션 : 클라이언트가 세션id생성 후 쿠키를 전달, 서버에 중요정보는 보관, 정보는 세션id통해 서버에서 조회
클라이언트 요청시 항상 mySessionId 쿠키전달 (UUID는 추정이 불가능)
클라이언트는 쿠키 저장소에 mySessionId 쿠키를 보관
중요정보는 클라이언트에 보관하지 않고 생성된 세션 ID와 세션에 보관할 값( memberA )을 서버의 세션 저장소에 보관

세션생성(세션id생성,쿠키생성하여 전달)/세션조회/세션만료

세션조회 코드
return Arrays.stream(request.getCookies())
 .filter(cookie -> cookie.getName().equals(cookieName))
 .findAny()
 .orElse(null);

<세션매니저 동작방식> - 서블릿은 HTTP 세션을 통해 세션매니저 구현없이 사용 가능!
세션생성 - 로그인 시 작동
세션ID생성 : UUID.randomUUID().toString(); 으로 예측불가값으로 세션id만든후 세션저장소에 세션id와 로그인멤버정보를 저장
쿠키 생성 : 쿠키에 세션용 쿠키 이름으로 세션ID등록하여 생성
응답 : 세션쿠키 추가하여 응답

세션조회 - 각종 화면에서 작동 (세션조회후 나온 멤버정보 받아서 모델에 넣고 로그인용 화면 뷰 띄움. 안나오면 비로그인 화면 띄움.)
세션쿠키 찾기 : 요청의 쿠키Array를 .Stream-filter()구문으로 읽으면서 세션쿠키 존재여부 확인
멤버정보 반환 : 세션쿠키의 value(세션id)로 세션저장소 조회하여 멤버정보 리턴시킴

세션만료 - 로그아웃 시 작동
세션쿠키 찾기 : 요청의 쿠키Array를 .Stream-filter()구문으로 읽으면서 세션쿠키 존재여부 확인
세션쿠키 삭제 : 세션쿠키의 value(세션id)로 세션저장소 조회하여 세션저장소에서 삭제

HttpSession
상수선언 : 세션 생성/조회 시 로그인멤버 오브젝트 보관/검색할 오브젝트의 키를 상수로 선언함.
 public static final String LOGIN_MEMBER = "loginMember";

세션생성 : 세션을 생성하려면 request.getSession(true) 를 사용하면 된다. (true는 디폴트라 생략가능)
HttpSession session = request.getSession();			//세션생성
session.setAttribute(SessionConst.LOGIN_MEMBER, loginMember);	//세션에 로그인정보 보관 (해당 세션에 LOGIN_MEMBER로 오브젝트 키를 만들고, 그 키에 멤버 오브젝트 저장함)

세션삭제 : 세션조회후 있으면 session.invalidate(); 로 삭제
HttpSession session = request.getSession(false);
if (session != null) {
 session.invalidate();
}

세션조회 : 메서드 파라미터에 이 구문 한줄로 끝남. 아래 노필요 @SessionAttribute(name=SessionConst.LOGIN_MEMBER, required = false) Member loginMember
HttpSession session = request.getSession(false);
Member loginMember = (Member)session.getAttribute(SessionConst.LOGIN_MEMBER);   //로그인 시점에 세션에 보관한 회원 객체를 찾는다.

세션정보 :
sessionId : 세션Id, JSESSIONID 의 값이다. 예) 34B14F008AA3527C9F8ED620EFD7A4E1
maxInactiveInterval : 세션의 유효 시간, 예) 1800초, (30분)
creationTime : 세션 생성일시
lastAccessedTime : 세션과 연결된 사용자가 최근에 서버에 접근한 시간, 클라이언트에서 서버로 sessionId ( JSESSIONID )를 요청한 경우에 갱신된다.
isNew : 새로 생성된 세션인지, 아니면 이미 과거에 만들어졌고, 클라이언트에서 서버로 sessionId( JSESSIONID )를 요청해서 조회된 세션인지 여부


세션 타임아웃 설정 : LastAccessedTime 이후로 timeout 시간이 지나면, WAS가 내부에서 해당 세션을 제거한다.
application.properties에서 글로벌 설정 : server.servlet.session.timeout=60 : 60초, 기본은 1800(30분)
특정 세션 단위로 시간 설정 (세션만들때 설정) : session.setMaxInactiveInterval(1800); //1800초


------------필터, 인터셉션
공통관심사항 : 스프링의 AOP로도 해결할 수 있지만, 웹과 관련된 공통 관심사는 서블릿 필터 또는 스프링 인터셉터로 해결가능

필터 흐름
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러

필터 제한
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 //로그인 사용자
HTTP 요청 -> WAS -> 필터(적절하지 않은 요청이라 판단, 서블릿 호출X) //비 로그인 사용자

필터 체인 : 필터는 여러개 적용 가능하다
HTTP 요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러

필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고, 관리한다.
init(): 필터 초기화 메서드, 서블릿 컨테이너가 생성될 때 호출된다.
doFilter(): 고객의 요청이 올 때 마다 해당 메서드가 호출된다. 필터의 로직을 구현하면 된다.
destroy(): 필터 종료 메서드, 서블릿 컨테이너가 종료될 때 호출된다

필터 사용 : 1. 필터 인터페이스 구현, 2. 필터 설정
public class LogFilter implements Filter {} : 필터를 사용하려면 필터 인터페이스를 구현해야 한다.
doFilter(ServletRequest request, ServletResponse response, FilterChain chain) : HTTP 요청이 오면 doFilter 가 호출된다.
ServletRequest request 는 HTTP 요청이 아닌 경우까지 고려해서 만든 인터페이스이다. 
HTTP를 사용하면 HttpServletRequest httpRequest = (HttpServletRequest) request; 와 같이 다운 캐스팅 하면 된다.
String uuid = UUID.randomUUID().toString(); : HTTP 요청을 구분하기 위해 요청당 임의의 uuid 를 생성해둔다.
chain.doFilter(request, response); : 중요. 다음 필터가 있으면 필터를 호출하고, 필터가 없으면 서블릿을 호출한다. 이거 안쓰면 진행안됨
필터 설정 : 스프링 부트를 사용한다면 FilterRegistrationBean 을 사용해서 등록
setFilter(new LogFilter()) : 등록할 필터를 지정한다.
setOrder(1) : 필터는 체인으로 동작한다. 따라서 순서가 필요하다. 낮을 수록 먼저 동작한다.
addUrlPatterns("/*") : 필터를 적용할 URL 패턴을 지정한다. 한번에 여러 패턴을 지정할 수 있다.

필터설정 코드
@Bean
public FilterRegistrationBean logFilter() { 
	FilterRegistrationBean<Filter> filterRegistrationBean = new FilterRegistrationBean<>();
	filterRegistrationBean.setFilter(new LogFilter());
	filterRegistrationBean.setOrder(1);
 	filterRegistrationBean.addUrlPatterns("/*");
 	return filterRegistrationBean;
}

로그인 필터 방식 : 
1. 화이트리스트와 requestURI 비교 : !PatternMatchUtils.simpleMatch(whitelist, requestURI)
2. 일치하지 않으면 세션 조회후 로그인 상태여부, 로그인 멤버값 여부 확인 : if (session == null || session.getAttribute(SessionConst.LOGIN_MEMBER) == null)
3-1. 없으면 로그인화면으로 리다이렉트 : httpResponse.sendRedirect("/login?redirectURL=" + requestURI); return; //로그인 성공시 현재 URL로 재이동, 
3-2. 해당 경로로 이동하는 기능은 추가로 개발 : 로그인컨트롤러 파라미터에 @RequestParam(defaultValue = "/") String RedirectURL 추가, 반환값 변경 return "redirect:" + RedirectURL;
4. 로그인 유저면 필터 통과이므로 다음 서블릿으로 연결 : chain.doFilter(request, response);
5. WebConfig에서 필터 설정


<스프링 인터셉터> 인터셉터>>>>필터
스프링 인터셉터 흐름
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러

스프링 인터셉터 제한
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 //로그인 사용자
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터(적절하지 않은 요청이라 판단, 컨트롤러 호출 X) // 비 로그인 사용자

스프링 인터셉터 체인 : 인터셉터도 여러개 설정 가능
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 -> 컨트롤러

인터셉터 제공 인터페이스는 3가지 (필터는 1가지 : doFilter), 구현체 만들 때 HandlerInterceptor 인터페이스 구현 (implements HandlerInterceptor)
preHandle : 컨트롤러 호출 전에 호출된다. (더 정확히는 핸들러 어댑터 호출 전에 호출된다.) : preHandle 응답값이 true면 진행, false면 끝냄
postHandle : 컨트롤러 호출 후에 호출된다. (더 정확히는 핸들러 어댑터 호출 후에 호출된다.) (예외 발생시 호출안됨.)
afterCompletion : 뷰가 렌더링 된 이후에 호출된다(예외 발생시에도 호출됨. 예외무관 공통처리 필요시 사용. 예외정보(ex) 파라미터로 사용가능.)

인터셉터
request.setAttribute(LOG_ID, uuid) : 
서블릿 필터의 경우 지역변수로 해결이 가능하지만, 스프링 인터셉터는 호출 시점이 완전히 분리되어 있다. 
따라서 preHandle 에서 지정한 값을 postHandle , afterCompletion 에서 함께 사용하려면 어딘가에 담아두어야 한다. 
LogInterceptor 도 싱글톤 처럼 사용되기 때문에 맴버변수를 사용하면 위험하다. 
따라서 request 에 담아두었다. 이 값은 afterCompletion 에서 request.getAttribute(LOG_ID) 로 찾아서 사용한다.
return true : true 면 정상 호출이다. 다음 인터셉터나 컨트롤러가 호출된다

핸들러정보 얻는 법 : 타입에 따라서 처리가 필요하다.
HandlerMethod : @Controller , @RequestMapping 을 활용한 핸들러 매핑을 사용하면 핸들러 정보로 HandlerMethod 가 넘어온다.
ResourceHttpRequestHandler : @Controller 가 아니라 /resources/static 와 같은 정적 리소스가 호출 되는 경우ResourceHttpRequestHandler 가 핸들러 정보로 넘어온다.

WebMvcConfigurer 가 제공하는 addInterceptors() 를 사용해서 인터셉터를 등록할 수 있다.
registry.addInterceptor(new LogInterceptor()) : 인터셉터를 등록한다.
order(1) : 인터셉터의 호출 순서를 지정한다. 낮을 수록 먼저 호출된다.
addPathPatterns("/**") : 인터셉터를 적용할 URL 패턴을 지정한다.
excludePathPatterns("/css/**", "/*.ico", "/error") : 인터셉터에서 제외할 패턴을 지정한다.
필터와 비교해보면 인터셉터는 addPathPatterns , excludePathPatterns 로 매우 정밀하게 URL 패턴을 지정할 수 있다.

인터셉터 등록코드
@Configuration
public class WebConfig implements WebMvcConfigurer {
 	@Override
 	public void addInterceptors(InterceptorRegistry registry) {
 		registry.addInterceptor(new LogInterceptor())
 			.order(1)
 			.addPathPatterns("/**")
 			.excludePathPatterns("/css/**", "/*.ico", "/error");
 	}


인터셉터는 필터설정시 등록을 통해 인터셉터 메서드에서 화이트리스트 검증로직 불필요
타임리프 : 
서버사이드렌더링 하는거 (백엔드에서 html 동적으로 렌더링)
네츄럴 템플릿 : 순수HTML을 최대한 유지해서 웹에서 열어봐도 파일안깨짐
th:utext= unescape처리, 태그적용할때 등 "<"를 "<"그대로 읽음

th:inline="none" : 타임리프로 해석하지 말란뜻 

escape처리를 기본으로 하고, 특수상황에서만 unescape를 쓴다

변수선언 th:with="변수명=${데이터}"

타임리프가 제공한다 기본객체
${#locale}

편의 객체도 제공한다.
HTTP 요청 파라미터 접근: param
예) ${param.paramData}
HTTP 세션 접근: session
예) ${session.sessionData}
스프링 빈 접근: @
예) ${@helloBean.hello('Spring!')}


유틸리티 객체와 날짜
타임리프는 문자, 숫자, 날짜, URI등을 편리하게 다루는 다양한 유틸리티 객체들을 제공한다.
필요할떄 메뉴얼 보고 쓰면댐
타임리프 유틸리티 객체들
#message : 메시지, 국제화 처리
#uris : URI 이스케이프 지원
#dates : java.util.Date 서식 지원
#calendars : java.util.Calendar 서식 지원
#temporals : 자바8 날짜 서식 지원
#numbers : 숫자 서식 지원
#strings : 문자 관련 편의 기능
#objects : 객체 관련 기능 제공
#bools : boolean 관련 기능 제공
#arrays : 배열 관련 기능 제공
#lists , #sets , #maps : 컬렉션 관련 기능 제공
#ids : 아이디 처리 관련 기능 제공, 뒤에서 설명

URL링크
url표현 : th:href="@{/hello}"
url에 파라미터 넣는 법 : th:href="@{/hello(param1=${param1}, param2=${param2})}"
url에 경로 넣는 법 : th:href="@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}"
url에 경로와 파람 넣는 법 : th:href="@{/hello/{param1}(param1=${param1}, param2=${param2})}"
(경로 매핑후 남는애들은 파라미터로 들어감)

리터럴
타임리프에서 문자리터럴은 항상 ' (작은따옴표)로 감싸야한다
공백없이 쭉이어진다면 생략해도된다
리터럴 대체문법 :  th:text="|hello ${data}|"
"'hello ' + ${data}" 대신 대체문법으로 편하게 쓸 수 있따

연산
비교연산: HTML 엔티티를 사용해야 하는 부분을 주의하자, 
> (&gt;) (gt), < (&lt;) (lt), >= (ge), <= (le), ! (not), == (eq), != (neq, ne)
조건식: 자바의 조건식과 유사하다.  th:text="(조건식)? 'true식':'false식'"
Elvis 연산자: 조건식의 편의 버전. true면 data출력.  th:text="${data}?: 'false식'"
No-Operation: _ 인 경우 마치 타임리프가 실행되지 않는 것 처럼 동작한다.   
<span th:text="${data}?: _">데이터가 없습니다.</span> : true면 data 출력, false면 span태그 내부 텍스트 실행됨.
이것을 잘 사용하면 HTML의 내용 그대로 활용할 수 있다. 마지막 예를 보면 데이터가 없습니다. 부분이 그대로 출력된다